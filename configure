#!/usr/bin/python3

import jinja2
import json
import sys
import os

def canonicalize_path(wd, p):
  if p.startswith('//'):
    return p[2:]
  if p.startswith('/'):
    return p
  return os.path.join(wd, p)

def canonicalize_each(wd, paths):
  return [canonicalize_path(wd, p) for p in paths]


def generate_build_file(wd):
  environment = jinja2.Environment(loader=jinja2.FileSystemLoader('.'),
                                   keep_trailing_newline=True,
                                   trim_blocks=False)

  configure_file = canonicalize_path(wd, 'configure.json')
  with open(configure_file) as fp:
    configure = json.load(fp)

  for name in configure.get('environments', []):
    configure['data'][name] = os.environ.get(name, '')

  build_file = None
  deps = [configure_file]
  if 'output' in configure:
    build_file = canonicalize_path(wd, configure['output'])

    template_file = canonicalize_path(wd, configure['template'])
    template = environment.get_template(template_file)

    content = template.render(configure['data'])

    deps.append(template_file)

    try:
      parent = os.path.dirname(build_file)
      if parent:
        os.makedirs(parent)
    except FileExistsError:
      pass
    with open(build_file, 'w') as fp:
      fp.write(content)

  components = canonicalize_each(wd, configure.get('components', []))
  return build_file, deps, components

def main(argv):
  configure_script_abs = os.path.realpath(__file__)
  os.chdir(os.path.dirname(__file__))
  configure_script = os.path.relpath(configure_script_abs)

  out, deps, components = generate_build_file('')
  while len(components) > 0:
    c = components[0]
    components = components[1:]

    _, ds, cs = generate_build_file(c)
    deps += ds
    components += cs

  deps.append(configure_script)
  with open(out + '.dep', 'w') as fp:
    fp.write('%s: %s\n' % (out, ' '.join(deps)))
  return 0

if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
